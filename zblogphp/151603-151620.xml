<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\c_system_event.php' crc32='92EF71D3'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_base.php' crc32='CE1E0A2E'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='800AC5C3'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\module.php' crc32='26CEE292'  dt:dt='bin.base64'>PD9waHANCi8qKg0KICog5qih5Z2X57G7DQogKg0KICogQHBhY2thZ2UgWi1CbG9nUEhQDQogKiBAc3VicGFja2FnZSBDbGFzc0xpYi9Nb2R1bGUg57G75bqTDQogKi8NCmNsYXNzIE1vZHVsZSBleHRlbmRzIEJhc2Ugew0KDQogICAgLyoqDQogICAgICog5p6E6YCg5Ye95pWwDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgkemJwLT50YWJsZVsnTW9kdWxlJ10sICR6YnAtPmRhdGFpbmZvWydNb2R1bGUnXSwgX19DTEFTU19fKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDorr7nva7lj4LmlbDlgLwNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIG1peGVkICR2YWx1ZQ0KICAgICAqIEByZXR1cm4gbnVsbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkbmFtZSwgJHZhbHVlKSB7DQogICAgICAgIGdsb2JhbCAkemJwOw0KICAgICAgICBpZiAoJG5hbWUgPT0gJ1NvdXJjZVR5cGUnKSB7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ05vUmVmcmVzaCcpIHsNCiAgICAgICAgICAgIGlmICgoYm9vbCkgJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPk1ldGFzLT5ub3JlZnJlc2ggPSAoYm9vbCkgJHZhbHVlOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+TWV0YXMtPkRlbCgnbm9yZWZyZXNoJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQogICAgICAgIHBhcmVudDo6X19zZXQoJG5hbWUsICR2YWx1ZSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICog6I635Y+W5Y+C5pWw5YC8DQogICAgICogQHBhcmFtICRuYW1lDQogICAgICogQHJldHVybiBib29sfG1peGVkfHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2dldCgkbmFtZSkgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgaWYgKCRuYW1lID09ICdTb3VyY2VUeXBlJykgew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5Tb3VyY2UgPT0gJ3N5c3RlbScpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJ3N5c3RlbSc7DQogICAgICAgICAgICB9IGVsc2VpZiAoJHRoaXMtPlNvdXJjZSA9PSAndXNlcicpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJ3VzZXInOw0KICAgICAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5Tb3VyY2UgPT0gJ3RoZW1lJykgew0KICAgICAgICAgICAgICAgIHJldHVybiAndGhlbWUnOw0KICAgICAgICAgICAgfSBlbHNlaWYgKCR0aGlzLT5Tb3VyY2UgPT0gJ3BsdWdpbl8nIC4gJHpicC0+dGhlbWUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJ3RoZW1lJzsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICdwbHVnaW4nOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbmFtZSA9PSAnTm9SZWZyZXNoJykgew0KICAgICAgICAgICAgcmV0dXJuIChib29sKSAkdGhpcy0+TWV0YXMtPm5vcmVmcmVzaDsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoJG5hbWUgPT0gJ05hbWUnICYmICR0aGlzLT5Tb3VyY2UgPT0gJ3N5c3RlbScpIHsNCiAgICAgICAgICAgIHN3aXRjaCAoJHRoaXMtPkZpbGVOYW1lKSB7DQogICAgICAgICAgICAgICAgY2FzZSAnY2FsZW5kYXInOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHpicC0+bGFuZ1snbXNnJ11bJ2NhbGVuZGFyJ107DQogICAgICAgICAgICAgICAgY2FzZSAnY29udHJvbHBhbmVsJzoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR6YnAtPmxhbmdbJ21zZyddWydjb250cm9sX3BhbmVsJ107DQogICAgICAgICAgICAgICAgY2FzZSAnc2VhcmNocGFuZWwnOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHpicC0+bGFuZ1snbXNnJ11bJ3NlYXJjaCddOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkemJwLT5sYW5nWydtc2cnXVsnbW9kdWxlXycuJHRoaXMtPkZpbGVOYW1lXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6Ol9fZ2V0KCRuYW1lKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gU2F2ZSgpIHsNCiAgICAgICAgZ2xvYmFsICR6YnA7DQoNCiAgICAgICAgJHRoaXMtPkNvbnRlbnQgPSBzdHJfcmVwbGFjZSgkemJwLT5ob3N0LCAneyRob3N0fScsICR0aGlzLT5Db250ZW50KTsNCg0KICAgICAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9Nb2R1bGVfU2F2ZSddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHtyZXR1cm4gJGZwcmV0dXJuO30NCiAgICAgICAgfQ0KICAgICAgICBpZiAoJHRoaXMtPlNvdXJjZSA9PSAndGhlbWUnKSB7DQogICAgICAgICAgICBpZiAoISR0aGlzLT5GaWxlTmFtZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkYyA9ICR0aGlzLT5Db250ZW50Ow0KICAgICAgICAgICAgJGQgPSAkemJwLT51c2Vyc2RpciAuICd0aGVtZS8nIC4gJHpicC0+dGhlbWUgLiAnL2luY2x1ZGUvJzsNCiAgICAgICAgICAgICRmID0gJGQgLiAkdGhpcy0+RmlsZU5hbWUgLiAnLnBocCc7DQogICAgICAgICAgICBpZiAoIWZpbGVfZXhpc3RzKCRkKSkgew0KICAgICAgICAgICAgICAgIEBta2RpcigkZCwgMDc1NSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBAZmlsZV9wdXRfY29udGVudHMoJGYsICRjKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgLy9yZXR1cm4gcGFyZW50OjpTYXZlKCk7DQogICAgICAgIC8v6ZiyTW9kdWxl6YeN5aSN5L+d5a2Y55qE5py65Yi2DQogICAgICAgICRtPSR6YnAtPkdldExpc3RUeXBlKCdNb2R1bGUnLA0KICAgICAgICAgICAgICAgICAgICAkemJwLT5kYi0+c3FsLT5nZXQoKS0+c2VsZWN0KCR6YnAtPnRhYmxlWydNb2R1bGUnXSkNCiAgICAgICAgICAgICAgICAgICAgLT53aGVyZShhcnJheSgnPScsICR6YnAtPmRhdGFpbmZvWydNb2R1bGUnXVsnRmlsZU5hbWUnXVswXSwgJHRoaXMtPkZpbGVOYW1lKSkNCiAgICAgICAgICAgICAgICAgICAgLT5zcWwNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICBpZihjb3VudCgkbSk8MSl7DQogICAgICAgICAgICByZXR1cm4gcGFyZW50OjpTYXZlKCk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgaWYoJHRoaXMtPklEPT0wKXsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gcGFyZW50OjpTYXZlKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRGVsKCkgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fTW9kdWxlX0RlbCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCiAgICAgICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJHRoaXMpOw0KICAgICAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHtyZXR1cm4gJGZwcmV0dXJuO30NCiAgICAgICAgfQ0KICAgICAgICBpZiAoJHRoaXMtPlNvdXJjZSA9PSAndGhlbWUnKSB7DQogICAgICAgICAgICBpZiAoISR0aGlzLT5GaWxlTmFtZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkZiA9ICR6YnAtPnVzZXJzZGlyIC4gJ3RoZW1lLycgLiAkemJwLT50aGVtZSAuICcvaW5jbHVkZS8nIC4gJHRoaXMtPkZpbGVOYW1lIC4gJy5waHAnOw0KICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRmKSkgew0KICAgICAgICAgICAgICAgIEB1bmxpbmsoJGYpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ6OkRlbCgpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBCdWlsZCgpIHsNCg0KICAgICAgICBpZiAoJHRoaXMtPk5vUmVmcmVzaCA9PSB0cnVlKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNzZXQoTW9kdWxlQnVpbGRlcjo6JExpc3RbJHRoaXMtPkZpbGVOYW1lXSkpIHsNCiAgICAgICAgICAgIGlmKGlzc2V0KE1vZHVsZUJ1aWxkZXI6OiRMaXN0WyR0aGlzLT5GaWxlTmFtZV1bJ2Z1bmN0aW9uJ10pKXsNCiAgICAgICAgICAgICAgICBpZihpc3NldChNb2R1bGVCdWlsZGVyOjokTGlzdFskdGhpcy0+RmlsZU5hbWVdWydwYXJhbWV0ZXJzJ10pKXsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkNvbnRlbnQgPSBjYWxsX3VzZXJfZnVuYyhNb2R1bGVCdWlsZGVyOjokTGlzdFskdGhpcy0+RmlsZU5hbWVdWydmdW5jdGlvbiddLCBNb2R1bGVCdWlsZGVyOjokTGlzdFskdGhpcy0+RmlsZU5hbWVdWydwYXJhbWV0ZXJzJ10pOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Q29udGVudCA9IGNhbGxfdXNlcl9mdW5jKE1vZHVsZUJ1aWxkZXI6OiRMaXN0WyR0aGlzLT5GaWxlTmFtZV1bJ2Z1bmN0aW9uJ10pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\function\lib\sqlglobal.php' crc32='98037945'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\urlrule.php' crc32='5EA894B3'  dt:dt='bin.base64'></file>
	<file name='zb_system\script\zblogphp.js' crc32='E819D81E'  dt:dt='bin.base64'></file>
	<file name='zb_users\language\en.php' crc32='8CC1CA28'  dt:dt='bin.base64'></file>
	<file name='readme.txt' crc32='25289A57'  dt:dt='bin.base64'>77u/Wi1CbG9nUEhQ5a6J6KOF6K+05piODQoNCjEuWi1CbG9nUEhQ6ZyA6KaBUEhQIDUuMuWPiuS7peS4iueJiOacrOeahFBIUOeOr+Wig+OAgg0KMi7mlK/mjIFJSVMsQXBhY2hlLExpZ2h0dHBkLE5naW54562JV2Vi5pyN5Yqh5Zmo44CCDQozLuS4iuS8oFotQmxvZ1BIUOOAgg0KNC7miZPlvIBodHRwOi8v5L2g55qE572R56uZL+OAgg0KNS7lkIzmhI9aLUJsb2forrjlj6/ljY/orq7jgIINCjYu5bu656uL5pWw5o2u5bqTDQogICAgWi1CbG9nUEhQ5pSv5oyBTXlTUUzku6Xlj4pTUUxpdGXmlbDmja7lupPjgILlhbfkvZPmgqjor6Xkvb/nlKjlk6rkuIDnp43pnIDopoHlj4LogIPnqbrpl7TphY3nva7jgIINCiAgICDkuIDoiKzmg4XlhrXkuIvpgInmi6lNeVNRTOaVsOaNruW6k++8jOi+k+WFpeepuumXtOWVhuS4uuaCqOaPkOS+m+eahE15U1FM5biQ5Y+35a+G56CB44CCDQogICAg5oiW5piv5L2/55So5Y2V5pWw5o2u5bqT55qEU1FMaXRl77yM56iL5bqP5bCG6Ieq5Yqo5Yib5bu644CCDQogICAg54S25ZCO6L6T5YWl5L2g5Li656uZ54K56K6+572u55qE566h55CG5ZGY5biQ5Y+35a+G56CB44CCDQo3LuWuieijheaIkOWKn++8jOi/m+WFpee9keermeOAgg0KOC7lronoo4XlrozmiJDlkI7or7fliKDpmaR6Yl9pbnN0YWxs5paH5Lu25aS544CCDQo5Luezu+e7n+m7mOiupOmbhuaIkOeahOaYr1VFZGl0b3LnvJbovpHlmajvvIzlpoLpnIBNYXJrZG93bu+8jEtpbmRFZGl0b3LnrYnor7fliLDlupTnlKjkuK3lv4PmkJzntKLlubblronoo4XjgII=</file>
	<file name='zb_system\script\jquery.tagto.js' crc32='2ECADB6D'  dt:dt='bin.base64'>Ly9BdXRob3I6IFJlYWxhenkNCi8vaHR0cDovL3JlYWxhenkub3JnL2Jsb2cvIChjaGluZXNlKQ0KDQpqUXVlcnkuYXJyUmVtb3ZlID0gZnVuY3Rpb24oYXJyLCBybSl7DQogICAgZm9yICh2YXIgaSA9IDAsIG4gPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKXsNCiAgICAgICAgaWYgKGFycltpXSAhPSBybSkNCiAgICAgICAgICAgIGFycltuKytdID0gYXJyW2ldOw0KICAgIH0NCiAgICBhcnIubGVuZ3RoLS07DQp9DQoNCi8vdXNhZ2U6IGpRdWVyeShmcm9tKS50YWdUbyh0YXJnZXQsIHNlcGVyYXRvcikNCi8vZnJvbSBjb250YWluIHRoZSB0YWdzKHVzZSBhIGxpbmtzKSwgdGFyZ2V0IG11c3QgYmUgYXNzaWduZWQgYW5kIGl0cyB0eXBlIG11c3QgYmUgaW5wdXQgdHlwZT0idGV4dCIgb3IgdGV4dGFyZWENCi8vc2VwZXJhdG9yIGNhbiBiZSAiLSIsICIsIiBhbmQgc3BhY2UgZXRjLCBpZiBub3QgYXNzaWduLCB0aGUgZGVmYXVsdCBzZXBlcmF0b3IgaXMgIiwiDQovL3RjbGFzcyBpcyB0aGUgY2xhc3MgbmFtZSBvZiB0aGUgdGFnIHdoaWNoIGlzIGN1cnJlbnRseSBzZWxlY3RlZCwgaWYgbm90IGFzc2lnbiwgdGhlIGRlZmF1bHQgY2xhc3MgbmFtZSBpcyAic2VsZWN0ZWQiDQoNCmpRdWVyeS5mbi50YWdUbyA9IGZ1bmN0aW9uKHRhcmdldCwgc2VwZXJhdG9yLCB0Y2xhc3Mpew0KICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdGFyZ2V0KSB0YXJnZXQgPSBqUXVlcnkodGFyZ2V0KTsNCiAgICBzZXBlcmF0b3IgPSBhcmd1bWVudHNbMV0gfHwgIiwiOw0KICAgIHRjbGFzcyA9IGFyZ3VtZW50c1syXSB8fCAic2VsZWN0ZWQiOw0KDQogICAgdmFyIHRhZ25hbWUgPSB0YXJnZXQuZ2V0KDApLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7DQogICAgaWYgKHRhZ25hbWUgPT0gImlucHV0IiB8fCB0YWduYW1lID09ICJ0ZXh0YXJlYSIpew0KICAgICAgICBqUXVlcnkoJ2EnLCB0aGlzKS5jbGljayhmdW5jdGlvbigpew0KICAgICAgICAgICAgaWYgKGpRdWVyeS50cmltKHRhcmdldC52YWwoKSkgPT0gJycpew0KICAgICAgICAgICAgICAgIHRhcmdldC52YWwoalF1ZXJ5KHRoaXMpLnRleHQoKSk7DQogICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLmFkZENsYXNzKHRjbGFzcyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHZhciBhcnIgPSB0YXJnZXQudmFsKCkuc3BsaXQoc2VwZXJhdG9yKTsNCiAgICAgICAgICAgICAgICB2YXIgaXNJbkFyciA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbjsNCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGFyci5sZW5ndGg7IGkgPCBuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeS50cmltKGFycltpXSkgPT0galF1ZXJ5KHRoaXMpLnRleHQoKSl7DQogICAgICAgICAgICAgICAgICAgICAgICBpc0luQXJyID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gaTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChpc0luQXJyID09IHRydWUpew0KICAgICAgICAgICAgICAgICAgICBqUXVlcnkuYXJyUmVtb3ZlKGFyciwgYXJyW3Bvc2l0aW9uXSk7DQogICAgICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcyh0Y2xhc3MpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGpRdWVyeSh0aGlzKS50ZXh0KCkpOw0KICAgICAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykuYWRkQ2xhc3ModGNsYXNzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGFyZ2V0LnZhbChhcnIuam9pbihzZXBlcmF0b3IpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfSk7DQogICAgfSBlbHNlIHsNCiAgICAgICAgdGhyb3cgInRhcmdldCBtdXN0IGJlIGFuIHRleHQgYXJlYSI7DQogICAgfQ0KfQ0K</file>
	<file name='zb_system\script\md5.js' crc32='52FBF277'  dt:dt='bin.base64'></file>
</files>